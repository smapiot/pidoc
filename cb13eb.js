"use strict";(self.webpackChunk_pidoc_core=self.webpackChunk_pidoc_core||[]).push([[718],{5718:(e,s,n)=>{n.r(s),n.d(s,{default:()=>l});var a=n(4041),i=n(189),t={title:"Fences",description:"How to apply markdown fences correctly.",audience:"Everyone",level:"Beginner",section:"Markdown"};const l=function(){return a.createElement(i.ContentPage,null,a.createElement(i.PageLayout,{name:"default",meta:t},a.createElement(i.PageContent,{meta:t},a.createElement(i.Markdown,{content:'\n<h1 id="markdown-fences" tabindex="-1">Markdown Fences</h1>\n<p>Every documentation has special needs. For bringing up special remarks and comments <em>fences</em> exist. They are always enclosed in <code>:::</code>.</p>\n<h2 id="types-of-fences" tabindex="-1">Types of Fences</h2>\n<h3 id="tips" tabindex="-1">Tips</h3>\n<p>Tips look as below.</p>\n<div class="box tip"><p class="box-title">Title</p>\n<p>This is the tip itself.</p>\n</div>\n<p>The code for the section above looks like this:</p>\n<pre><code class="hljs language-md">::: tip: Title\nThis is the tip itself.\n:::\n</code></pre>\n<h3 id="warnings" tabindex="-1">Warnings</h3>\n<p>Warnings look as below.</p>\n<div class="box warning"><p class="box-title">Title</p>\n<p>This is the warning itself.</p>\n</div>\n<p>The code for the section above looks like this:</p>\n<pre><code class="hljs language-md">::: warning: Title\nThis is the warning itself.\n:::\n</code></pre>\n<h3 id="failures" tabindex="-1">Failures</h3>\n<p>Failures look as below.</p>\n<div class="box failure"><p class="box-title">Title</p>\n<p>This is the failure itself.</p>\n</div>\n<p>The code for the section above looks like this:</p>\n<pre><code class="hljs language-md">::: failure: Title\nThis is the failure itself.\n:::\n</code></pre>\n<h3 id="successes" tabindex="-1">Successes</h3>\n<p>Successes look as below.</p>\n<div class="box success"><p class="box-title">Title</p>\n<p>This is the success itself.</p>\n</div>\n<p>The code for the section above looks like this:</p>\n<pre><code class="hljs language-md">::: success: Title\nThis is the success itself.\n:::\n</code></pre>\n<h3 id="questions" tabindex="-1">Questions</h3>\n<p>Questions look as below.</p>\n<div class="box question"><p class="box-title">Title</p>\n<p>This is the question itself.</p>\n</div>\n<p>The code for the section above looks like this:</p>\n<pre><code class="hljs language-md">::: question: Title\nThis is the question itself.\n:::\n</code></pre>\n<h3 id="summaries" tabindex="-1">Summaries</h3>\n<p>Summaries look as below. In contrast to other fences they are collapsible.</p>\n<details class="summary"><summary>Title</summary>\n<p>This is the summary itself.</p>\n</details>\n<p>The code for the section above looks like this:</p>\n<pre><code class="hljs language-md">::: summary: Title\nThis is the summary itself.\n:::\n</code></pre>\n<div class="Generic">\n<p>Besides the given fences you are also able to use generic fences, i.e., just some <code>&lt;div&gt;</code>.</p>\n<p>Take for instance the following code:</p>\n<pre><code class="hljs language-md">::: #warning\n<span class="hljs-emphasis">*here be dragons*</span>\n:::\n</code></pre>\n<p>this results in</p>\n<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>here be dragons<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>As seen here:</p>\n<div id="warning">\n<p><em>here be dragons</em></p>\n</div>\n<p>More details on <a href="https://www.npmjs.com/package/markdown-it-div">generic fences here</a>.</p>\n</div>\n',link:"https://github.com/smapiot/pidoc/tree/develop/packages/example-app/docs/basics/02-fences.md",editLabel:"Edit on GitHub"}))))}}}]);
//# sourceMappingURL=cb13eb.js.map