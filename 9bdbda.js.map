{"version":3,"file":"9bdbda.js","mappings":"+JAyCUA,EAAO,CAAC,MAAQ,WAAW,YAAc,6CAA6C,SAAW,WAAW,MAAQ,WAAW,QAAU,cAGnJ,mBAAqB,OACnBC,EAAAA,cAACC,EAAAA,YAAW,KAEVD,EAAAA,cAACE,EAAAA,WAAU,CAACC,KAAM,UAAWJ,KAAMA,GACjCC,EAAAA,cAACI,EAAAA,YAAW,CAACL,KAAMA,GACjBC,EAAAA,cAACK,EAAAA,SAAQ,CAACC,QA1CD,wrGA0CgBC,KA3ChB,oGA2C4BC,UAAW,qBAKvD,C","sources":["webpack://@pidoc/core/./src/tools/__generated__/generators-01-overview.en.tsx"],"sourcesContent":["// {\"title\":\"Overview\",\"description\":\"Information about the handling of content.\",\"audience\":\"Everyone\",\"level\":\"Beginner\",\"section\":\"Generators\",\"link\":\"/basics/01-overview\",\"source\":\"/home/runner/work/pidoc/pidoc/packages/example-app/docs/generators/01-overview.md\"}\nimport * as React from 'react';\nimport { ContentPage } from '@pidoc/components';\n\n    import { PageContent, Markdown, PageLayout } from '@pidoc/components';\n\n    const link = \"https://github.com/smapiot/pidoc/tree/develop/packages/example-app/docs/generators/01-overview.md\";\n    const html = `\n<h1 id=\"generators-overview\" tabindex=\"-1\">Generators Overview</h1>\n<p>A generator is either a script file or package that is capable of transforming an input document to a page within the documentation.</p>\n<p>Generators are used to transform all kinds of content, e.g., Markdown documents, HTML pages, etc. to pages that are displayed in the documentation. The process is happening completely at build-time.</p>\n<p>The signature of a generator module is as follows:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">EntryDocument</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">file</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">route</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GeneratorOptions</span> {\n  <span class=\"hljs-attr\">segment</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GeneratorBuildOptions</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GeneratorOptions</span> {\n  <span class=\"hljs-attr\">resolveLink</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GeneratorFindOptions</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GeneratorOptions</span> {\n  <span class=\"hljs-attr\">fileNames</span>: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;;\n  <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">include</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">sorting</span>: <span class=\"hljs-string\">&#x27;asc&#x27;</span> | <span class=\"hljs-string\">&#x27;dsc&#x27;</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">entry: EntryDocument, options: GeneratorBuildOptions</span>): <span class=\"hljs-built_in\">string</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">find</span>(<span class=\"hljs-params\">basePath: <span class=\"hljs-built_in\">string</span>, docsFolder: <span class=\"hljs-built_in\">string</span>, options: GeneratorFindOptions</span>): <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">EntryDocument</span>&gt;;\n</code></pre>\n<p>The <code>find</code> function will be used to filter across all documents that have been identified with a generic lookup. This way, the generator could also combine the documents into a single entry.</p>\n<p>The <code>build</code> function will be used to get the content of a previously identified entry document.</p>\n`;\n    const meta = {\"title\":\"Overview\",\"description\":\"Information about the handling of content.\",\"audience\":\"Everyone\",\"level\":\"Beginner\",\"section\":\"Generators\"};\n  \n\nexport default () => (\n  <ContentPage>\n    \n    <PageLayout name={\"default\"} meta={meta}>\n      <PageContent meta={meta}>\n        <Markdown content={html} link={link} editLabel={\"Edit on GitHub\"} />\n      </PageContent>\n    </PageLayout>\n  \n  </ContentPage>\n);"],"names":["meta","React","ContentPage","PageLayout","name","PageContent","Markdown","content","link","editLabel"],"sourceRoot":""}